/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ProfileCollection {
  export type ProfileStruct = {
    name: PromiseOrValue<string>;
    bio: PromiseOrValue<string>;
    avatar: PromiseOrValue<string>;
    location: PromiseOrValue<string>;
    website: PromiseOrValue<string>;
    extra: PromiseOrValue<string>;
  };

  export type ProfileStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    name: string;
    bio: string;
    avatar: string;
    location: string;
    website: string;
    extra: string;
  };
}

export interface ProfileCollectionInterface extends utils.Interface {
  functions: {
    "profiles(address)": FunctionFragment;
    "setExtra(string)": FunctionFragment;
    "setProfile((string,string,string,string,string,string))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "profiles" | "setExtra" | "setProfile"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "profiles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExtra",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfile",
    values: [ProfileCollection.ProfileStruct]
  ): string;

  decodeFunctionResult(functionFragment: "profiles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setExtra", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setProfile", data: BytesLike): Result;

  events: {
    "ProfileChanged(address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProfileChanged"): EventFragment;
}

export interface ProfileChangedEventObject {
  owner: string;
  profile: ProfileCollection.ProfileStructOutput;
}
export type ProfileChangedEvent = TypedEvent<
  [string, ProfileCollection.ProfileStructOutput],
  ProfileChangedEventObject
>;

export type ProfileChangedEventFilter = TypedEventFilter<ProfileChangedEvent>;

export interface ProfileCollection extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProfileCollectionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    profiles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string] & {
        name: string;
        bio: string;
        avatar: string;
        location: string;
        website: string;
        extra: string;
      }
    >;

    setExtra(
      _extra: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProfile(
      _profile: ProfileCollection.ProfileStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  profiles(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string] & {
      name: string;
      bio: string;
      avatar: string;
      location: string;
      website: string;
      extra: string;
    }
  >;

  setExtra(
    _extra: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProfile(
    _profile: ProfileCollection.ProfileStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    profiles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string] & {
        name: string;
        bio: string;
        avatar: string;
        location: string;
        website: string;
        extra: string;
      }
    >;

    setExtra(
      _extra: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProfile(
      _profile: ProfileCollection.ProfileStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ProfileChanged(address,tuple)"(
      owner?: null,
      profile?: null
    ): ProfileChangedEventFilter;
    ProfileChanged(owner?: null, profile?: null): ProfileChangedEventFilter;
  };

  estimateGas: {
    profiles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setExtra(
      _extra: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProfile(
      _profile: ProfileCollection.ProfileStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    profiles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setExtra(
      _extra: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProfile(
      _profile: ProfileCollection.ProfileStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
